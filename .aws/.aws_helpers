#!/bin/bash

# @source - https://github.com/antonbabenko/awsp

AWS_HELPERS_DIR="$HOME/.aws/.aws_helpers"

function _awsListAll() {
    local credentialFileLocation
    credentialFileLocation=$(env | grep AWS_SHARED_CREDENTIALS_FILE | cut -d= -f2)

    if [ -z "$credentialFileLocation" ]; then
        credentialFileLocation=~/.aws/credentials
    fi

    while read -r line; do
        if [[ $line == "["* ]]; then
            echo "$line"
        fi
    done < "$credentialFileLocation"
}

function _awsListProfile() {
    local profileFileLocation
    profileFileLocation=$(env | grep AWS_CONFIG_FILE | cut -d= -f2)

    if [ -z "$profileFileLocation" ]; then
        profileFileLocation=~/.aws/config
    fi

    while read -r line; do
        if [[ $line == "["* ]]; then
            echo "$line"
        fi
    done < "$profileFileLocation"
}

function _awsSwitchProfile() {
    if [ -z "$1" ]; then
        echo "Usage: awsp <profile_name>"
        return 1
    fi

    local exists
    local role_arn
    local mfa_serial
    local mfa_token
    local source_profile
    local profile

    exists="$(aws configure get aws_access_key_id --profile "$1")"
    role_arn="$(aws configure get role_arn --profile "$1")"

    if [[ -n $exists || -n $role_arn ]]; then
        if [[ -n $role_arn ]]; then
            mfa_serial="$(aws configure get mfa_serial --profile "$1")"

            if [[ -n $mfa_serial ]]; then
                echo "Please enter your MFA token for $mfa_serial:"
                read -r mfa_token
            fi

            source_profile="$(aws configure get source_profile --profile "$1")"
            if [[ -n $source_profile ]]; then
                profile=$source_profile
            else
                profile=$1
            fi

            echo "Assuming role $role_arn using profile $profile"

            local JSON
            if [[ -n $mfa_serial ]]; then
                JSON="$(aws sts assume-role \
                    --profile="$profile" \
                    --role-arn "$role_arn" \
                    --role-session-name "$profile" \
                    --serial-number "$mfa_serial" \
                    --token-code "$mfa_token" )"
            else
                JSON="$(aws sts assume-role \
                    --profile="$profile" \
                    --role-arn "$role_arn" \
                    --role-session-name "$profile" )"
            fi

            local aws_access_key_id
            local aws_secret_access_key
            local aws_session_token

            aws_access_key_id="$(echo "$JSON" | jq -r '.Credentials.AccessKeyId')"
            aws_secret_access_key="$(echo "$JSON" | jq -r '.Credentials.SecretAccessKey')"
            aws_session_token="$(echo "$JSON" | jq -r '.Credentials.SessionToken')"

            export AWS_ACCESS_KEY_ID="$aws_access_key_id"
            export AWS_SECRET_ACCESS_KEY="$aws_secret_access_key"
            [[ -z "$aws_session_token" ]] && unset AWS_SESSION_TOKEN || export AWS_SESSION_TOKEN="$aws_session_token"

        else
            local aws_access_key_id
            local aws_secret_access_key

            aws_access_key_id="$(aws configure get aws_access_key_id --profile "$1")"
            aws_secret_access_key="$(aws configure get aws_secret_access_key --profile "$1")"

            export AWS_ACCESS_KEY_ID="$aws_access_key_id"
            export AWS_SECRET_ACCESS_KEY="$aws_secret_access_key"
            unset AWS_SESSION_TOKEN
        fi

        export AWS_DEFAULT_PROFILE="$1"
        export AWS_PROFILE="$1"

        echo "Switched to AWS Profile: $1"
        aws configure list
    else
        echo "Profile '$1' not found in your AWS config or credentials."
        return 1
    fi
}

function _awsSetProfile() {
    if [ -z "$1" ]; then
        echo "Usage: awsp <profile_name>"
        return 1
    fi

    export AWS_DEFAULT_PROFILE="$1"
    export AWS_PROFILE="$1"

    echo "Switched to AWS Profile: $1"
    echo "No credentials environment variables exported (intentionally)."
    echo "Example usage:"
    echo "  aws-vault exec $1 -- aws s3 ls"
    echo "  aws s3 ls"
}

alias awsall="_awsListProfile"
alias awsswp="_awsSwitchProfile"
alias awssp="_awsSetProfile"
alias awswho="aws configure list"

function _awsProfileCompletionList() {
    {
        grep -Eo '^\[.*\]' "$HOME/.aws/credentials" 2>/dev/null | tr -d '[]'
        grep -Eo '^\[profile [^]]+\]' "$HOME/.aws/config" 2>/dev/null | sed -E 's/^\[profile (.+)\]/\1/'
        grep -Eo '^\[(default)\]' "$HOME/.aws/config" 2>/dev/null | tr -d '[]'
    } | sort -u
}

complete -W "$(_awsProfileCompletionList)" _awsSwitchProfile awsswp _awsSetProfile awssp

# aws helper scripts
# [[ -f "$HOME/.aws/.aws_helpers" ]] && source "$HOME/.aws/.aws_helpers"
# [[ -f "$AWS_HELPERS_DIR" ]] && source "$AWS_HELPERS_DIR"

## eof
